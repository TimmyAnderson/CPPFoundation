//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <Framework/Foundation/Objects/CObject.h>
#include <Framework/Foundation/Types/CSharedPointer.h>
#include <Framework/Platform/Sockets/CSocketPlaformData.h>
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Foundation
{
//----------------------------------------------------------------------------------------------------------------------
	class ISocketWrapper : public virtual CObject
	{
//----------------------------------------------------------------------------------------------------------------------
		public:
			virtual int32 GetSocketHandler(void) const noexcept=0;
			virtual CPPFoundation::Platform::CSocketPlaformData GetPlatformData(void) const=0;

		public:
			ISocketWrapper(void);
			virtual ~ISocketWrapper(void) override;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	using														ISPSocketWrapper=CSharedPointer<ISocketWrapper>;
	using														ICSPSocketWrapper=CSharedPointer<const ISocketWrapper>;
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------