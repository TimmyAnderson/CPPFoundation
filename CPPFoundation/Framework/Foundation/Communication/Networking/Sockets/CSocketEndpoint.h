//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <Framework/Foundation/Strings/CString.h>
#include <Framework/Foundation/Types/CSharedPointer.h>
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Foundation
{
//----------------------------------------------------------------------------------------------------------------------
	class CSocketEndpoint : public CObject
	{
//----------------------------------------------------------------------------------------------------------------------
		public:
			bool operator==(const CSocketEndpoint& Other) const;
			bool operator!=(const CSocketEndpoint& Other) const;

		public:
			virtual CString ToString(void) const override=0;
			virtual bool Equals(const CSocketEndpoint& Other) const=0;

		public:
			CSocketEndpoint(void);
			virtual ~CSocketEndpoint(void) override;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	using														CSPSocketEndpoint=CSharedPointer<CSocketEndpoint>;
	using														CCSPSocketEndpoint=CSharedPointer<const CSocketEndpoint>;
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------