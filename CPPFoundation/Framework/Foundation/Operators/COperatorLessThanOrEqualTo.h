//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <functional>
#include <Framework/Platform/Global/Macros.h>
#include <Framework/Foundation/Objects/CObject.h>
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Foundation
{
//----------------------------------------------------------------------------------------------------------------------
	template<typename TParameter=void>
	class COperatorLessThanOrEqualTo final : public CObject
	{
//----------------------------------------------------------------------------------------------------------------------
		public:
			constexpr bool operator()(const TParameter& Left, const TParameter& Right) const
			{
				return(Left<=Right);
			}
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	class COperatorLessThanOrEqualTo<void> final : public CObject
	{
//----------------------------------------------------------------------------------------------------------------------
		public:
			template<typename TParameter1, typename TParameter2>
			constexpr auto operator()(TParameter1&& Left, TParameter2&& Right) const -> decltype(FUNCTION_FORWARD<TParameter1>(Left)<=FUNCTION_FORWARD<TParameter2>(Right))
			{
				return(FUNCTION_FORWARD<TParameter1>(Left)<=FUNCTION_FORWARD<TParameter2>(Right));
			}
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------