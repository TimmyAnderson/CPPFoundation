//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <mutex>
#include <Framework/Platform/Global/Macros.h>
#include <Framework/Foundation/Objects/CObject.h>
#include "CAbstractMutex.h"
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Foundation
{
//----------------------------------------------------------------------------------------------------------------------
	class CLock;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	class CMutex final : public CAbstractMutex
	{
//----------------------------------------------------------------------------------------------------------------------
		private:
			mutable std::recursive_mutex						MMutex;

		public:
			CMutex& operator=(const CMutex&)=delete;

		public:
			virtual void Lock(void) const override;
			virtual void Unlock(void) const override;
			// Can return FALSE even if MUTEX is LOCKED.
			virtual bool TryLock(void) const override;

		public:
			CMutex(void);
			CMutex(const CMutex&)=delete;
			virtual ~CMutex(void) override;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------