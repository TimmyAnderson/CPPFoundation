//----------------------------------------------------------------------------------------------------------------------
#include "CException.h"
#include <typeinfo>
#include <Framework/Platform/Global/CFunctions.h>
#include <Framework/Foundation/Strings/CIntegerFormatter.h>
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Foundation
{
//----------------------------------------------------------------------------------------------------------------------
	using namespace std;
	using namespace CPPFoundation::Platform;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CException::CException(void)
		: MMessage("")
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CException::CException(const CString& Message)
		: MMessage(Message)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CException::CException(CString&& Message)
		: MMessage(FUNCTION_MOVE(Message))
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CException::CException(const exception& Exception)
		: MMessage(GetExceptionMessage(Exception))
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CException::CException(const CString& Message, const exception& Exception)
		: MMessage(CString::Format("MESSAGE [",Message,"] EXCEPTION [",GetExceptionMessage(Exception),"] !"))
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CException::CException(const CString& Message, const CException& Exception)
		: MMessage(CString::Format("MESSAGE [",Message,"] EXCEPTION [",GetExceptionMessage(Exception),"] !"))
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CException::CException(const CException& Other)
		: MMessage(Other.MMessage)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CException::CException(CException&& Other) noexcept
		: MMessage(FUNCTION_MOVE(Other.MMessage))
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CException::~CException(void)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CException& CException::operator=(const CString& Message)
	{
		MMessage=Message;

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
	CException& CException::operator=(CString&& Message)
	{
		MMessage=FUNCTION_MOVE(Message);

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
	CException& CException::operator=(const exception& Exception)
	{
		MMessage=GetExceptionMessage(Exception);

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
	CException& CException::operator=(const CException& Other)
	{
		MMessage=Other.MMessage;

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
	CException& CException::operator=(CException&& Other) noexcept
	{
		MMessage=FUNCTION_MOVE(Other.MMessage);

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	ostream& operator<<(ostream& Stream, const CException& Value)
	{
		Stream << Value.GetMessage();

		return(Stream);
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CString CException::GetExceptionMessage(const exception& Exception)
	{
		CString													Message="";

		if (Exception.what()!=nullptr)
		{
			Message=CFunctions::GetDemangledName(Exception.what());

			Message.ReplaceAll("\r","");
			Message.ReplaceAll("\n","");
		}

		return(Message);
	}
//----------------------------------------------------------------------------------------------------------------------
	CString CException::GetExceptionMessage(const CException& Exception)
	{
		return(Exception.GetMessage());
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CString CException::GetErrorCodeMessage(int32 ErrorCode)
	{
		CString													ErrorMessage=CFunctions::GetLastErrorMessage(ErrorCode);
		CString													TextErrorMessage=CString::Format("CODE [",CInt32Formatter().ConvertToString(ErrorCode),"] TEXT [",ErrorMessage,"]");

		return(TextErrorMessage);
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	const CString& CException::GetMessage(void) const
	{
		return(MMessage);
	}
//----------------------------------------------------------------------------------------------------------------------
	CString CException::ToString(void) const
	{
		return(GetMessage());
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------