//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include "Types.h"
#include <Framework/Platform/Global/Macros.h>
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Foundation
{
//----------------------------------------------------------------------------------------------------------------------
	template<bool Constant>
	struct STypeTraitBoolConstant
	{
//----------------------------------------------------------------------------------------------------------------------
		private:
			static constexpr bool								MValue=Constant;

		public:
			// HACK for VC++. It doesn't support CONST EXPRESSION in SOME CONTEXTS.
			static const bool									RawValue=Constant;

		public:
			constexpr static bool Value(void) noexcept
			{
				return(MValue);
			}
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	using														STrue=STypeTraitBoolConstant<true>;
	using														SFalse=STypeTraitBoolConstant<false>;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitRemoveConst
	{
//----------------------------------------------------------------------------------------------------------------------
		public:
			using												Type=TType;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitRemoveConst<const TType>
	{
//----------------------------------------------------------------------------------------------------------------------
		public:
			using												Type=TType;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitRemoveVolatile
	{
//----------------------------------------------------------------------------------------------------------------------
		public:
			using												Type=TType;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitRemoveVolatile<volatile TType>
	{
//----------------------------------------------------------------------------------------------------------------------
		public:
			using												Type=TType;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitRemoveConstVolatile
	{
//----------------------------------------------------------------------------------------------------------------------
		public:
			using												Type=typename STypeTraitRemoveConst<typename STypeTraitRemoveVolatile<TType>::Type>::Type;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitInternalIsIntegral : public SFalse
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsIntegral<int8> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsIntegral<uint8> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsIntegral<int16> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsIntegral<uint16> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsIntegral<int32> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsIntegral<uint32> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsIntegral<int64> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsIntegral<uint64> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitIsIntegral : public STypeTraitInternalIsIntegral<typename STypeTraitRemoveConstVolatile<TType>::Type>
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitInternalIsFloatingPoint : public SFalse
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsFloatingPoint<float32> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsFloatingPoint<float64> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<>
	struct STypeTraitInternalIsFloatingPoint<float80> : public STrue
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitIsFloatingPoint : public STypeTraitInternalIsFloatingPoint<typename STypeTraitRemoveConstVolatile<TType>::Type>
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TBaseClass, typename TDerivedClass>
	struct STypeTraitIsBaseOf : public STypeTraitBoolConstant<std::is_base_of<TBaseClass,TDerivedClass>::value>
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitIsEnum : public STypeTraitBoolConstant<std::is_enum<TType>::value>
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitIsNumericType : public STypeTraitBoolConstant<STypeTraitIsIntegral<TType>::Value()==true || STypeTraitIsFloatingPoint<TType>::Value()==true>
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TType>
	struct STypeTraitIsDefaultConstructible : public STypeTraitBoolConstant<std::is_default_constructible<TType>::value>
	{
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------