//----------------------------------------------------------------------------------------------------------------------
#pragma once
//----------------------------------------------------------------------------------------------------------------------
#include <functional>
#include <Framework/Platform/Global/Macros.h>
#include <Framework/Foundation/Objects/CObject.h>
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Foundation
{
//----------------------------------------------------------------------------------------------------------------------
	template<typename TPrototype>
	class ICallableObject : public CObject
	{
//----------------------------------------------------------------------------------------------------------------------
		public:
			virtual bool IsValid(void) const noexcept=0;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	template<typename TResultType, typename... TParameters>
	class ICallableObject<TResultType(TParameters...)> : public CObject
	{
//----------------------------------------------------------------------------------------------------------------------
		protected:
			virtual TResultType InternalExecute(TParameters... Parameters) const=0;

		public:
			TResultType operator()(TParameters... Parameters) const
			{
				return(InternalExecute(FUNCTION_FORWARD<TParameters>(Parameters)...));
			}

		public:
			virtual bool IsValid(void) const noexcept=0;
//----------------------------------------------------------------------------------------------------------------------
	};
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------