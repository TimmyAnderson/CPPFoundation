//----------------------------------------------------------------------------------------------------------------------
#include "CPoint2D.h"
#include <Framework/Foundation/Exceptions/CInvalidOperationException.h>
#include "CMathematics.h"
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Foundation
{
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D::CPoint2D(void)
		: MX(0.0), MY(0.0)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D::CPoint2D(float64 X, float64 Y)
		: MX(X), MY(Y)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D::~CPoint2D(void)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	bool CPoint2D::operator==(const CPoint2D& Value) const
	{
		if (MX==Value.MX && MY==Value.MY)
		{
			return(true);
		}
		else
		{
			return(false);
		}
	}
//----------------------------------------------------------------------------------------------------------------------
	bool CPoint2D::operator!=(const CPoint2D& Value) const
	{
		return(!(*this==Value));
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D CPoint2D::operator+(const CPoint2D& Value) const
	{
		return(CPoint2D(MX+Value.MX,MY+Value.MY));
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D CPoint2D::operator-(const CPoint2D& Value) const
	{
		return(CPoint2D(MX-Value.MX,MY-Value.MY));
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D CPoint2D::operator*(const CPoint2D& Value) const
	{
		return(CPoint2D(MX*Value.MX,MY*Value.MY));
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D CPoint2D::operator/(const CPoint2D& Value) const
	{
		if (Value.MX==0.0)
		{
			throw(CInvalidOperationException("DIVISOR X can't be 0 !"));
		}

		if (Value.MY==0.0)
		{
			throw(CInvalidOperationException("DIVISOR Y can't be 0 !"));
		}

		return(CPoint2D(MX/Value.MX,MY/Value.MY));
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D CPoint2D::operator*(float64 Value) const
	{
		return(CPoint2D(MX*Value,MY*Value));
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D CPoint2D::operator/(float64 Value) const
	{
		if (Value==0.0)
		{
			throw(CInvalidOperationException("DIVISOR can't be 0 !"));
		}

		return(CPoint2D(MX/Value,MY/Value));
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D& CPoint2D::operator+=(const CPoint2D& Value)
	{
		MX+=Value.MX;
		MY+=Value.MY;

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D& CPoint2D::operator-=(const CPoint2D& Value)
	{
		MX-=Value.MX;
		MY-=Value.MY;

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D& CPoint2D::operator*=(const CPoint2D& Value)
	{
		MX*=Value.MX;
		MY*=Value.MY;

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D& CPoint2D::operator/=(const CPoint2D& Value)
	{
		if (Value.MX==0.0)
		{
			throw(CInvalidOperationException("DIVISOR X can't be 0 !"));
		}

		if (Value.MY==0.0)
		{
			throw(CInvalidOperationException("DIVISOR Y can't be 0 !"));
		}

		MX/=Value.MX;
		MY/=Value.MY;

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D& CPoint2D::operator*=(float64 Value)
	{
		MX*=Value;
		MY*=Value;

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
	CPoint2D& CPoint2D::operator/=(float64 Value)
	{
		if (Value==0.0)
		{
			throw(CInvalidOperationException("DIVISOR can't be 0 !"));
		}

		MX/=Value;
		MY/=Value;

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	float64 CPoint2D::GetX(void) const noexcept
	{
		return(MX);
	}
//----------------------------------------------------------------------------------------------------------------------
	void CPoint2D::SetX(float64 Value) noexcept
	{
		MX=Value;
	}
//----------------------------------------------------------------------------------------------------------------------
	float64 CPoint2D::GetY(void) const noexcept
	{
		return(MY);
	}
//----------------------------------------------------------------------------------------------------------------------
	void CPoint2D::SetY(float64 Value) noexcept
	{
		MY=Value;
	}
//----------------------------------------------------------------------------------------------------------------------
	float64 CPoint2D::Distance(const CPoint2D& Value) const
	{
		// Uses FORMULA [Length=SQRT((Width*Width)+(Height*Height))].
		float64													Width=CMathematics::AbsoluteValueFloatingPoint(Value.GetX()-MX);
		float64													Height=CMathematics::AbsoluteValueFloatingPoint(Value.GetY()-MY);
		float64													Length=CMathematics::SquareRoot((Width*Width)+(Height*Height));

		return(Length);
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------