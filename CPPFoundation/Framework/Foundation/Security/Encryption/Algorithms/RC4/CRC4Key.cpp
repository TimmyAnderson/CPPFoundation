//----------------------------------------------------------------------------------------------------------------------
#include "CRC4Key.h"
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Foundation
{
//----------------------------------------------------------------------------------------------------------------------
	CRC4Key::CRC4Key(const CByteBuffer& Password)
		: MPermutation(), MPointer1(0), MPointer2(0)
	{
		MPermutation.Fill(0);

		InitializeKey(Password);
	}
//----------------------------------------------------------------------------------------------------------------------
	CRC4Key::~CRC4Key(void)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	void CRC4Key::InitializeKeyLoop(const CByteBuffer& Password, Size Index, Size& Index1, Size& Index2)
	{
		static const uint8										MASK=0xFF;

		uint8													Value=MPermutation[Index];

		Index2=((static_cast<uint8>(Password[Index1]+Value+Index2)) & MASK);

		if (++Index1==Password.GetLength())
		{
			Index1=0;
		}

		MPermutation[Index]=MPermutation[Index2];
		MPermutation[Index2]=Value;
	}
//----------------------------------------------------------------------------------------------------------------------
	void CRC4Key::InitializeKey(const CByteBuffer& Password)
	{
		static const Size										STEP=4;

		MPointer1=0;
		MPointer2=0;

		Size													Index1=0;
		Size													Index2=0;

		for (Size Index=0;Index<MPermutation.GetConstLength();Index++)
		{
		    MPermutation[Index]=static_cast<uint8>(Index);
		}

		for (Size Index=0;Index<MPermutation.GetConstLength();Index+=STEP)
		{
			InitializeKeyLoop(Password,Index+0,Index1,Index2);
			InitializeKeyLoop(Password,Index+1,Index1,Index2);
			InitializeKeyLoop(Password,Index+2,Index1,Index2);
			InitializeKeyLoop(Password,Index+3,Index1,Index2);
		}
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CArray<uint8,256>& CRC4Key::GetPermutation(void) noexcept
	{
		return(MPermutation);
	}
//----------------------------------------------------------------------------------------------------------------------
	uint8 CRC4Key::GetPointer1(void) const noexcept
	{
		return(MPointer1);
	}
//----------------------------------------------------------------------------------------------------------------------
	void CRC4Key::SetPointer1(uint8 Value) noexcept
	{
		MPointer1=Value;
	}
//----------------------------------------------------------------------------------------------------------------------
	uint8 CRC4Key::GetPointer2(void) const noexcept
	{
		return(MPointer2);
	}
//----------------------------------------------------------------------------------------------------------------------
	void CRC4Key::SetPointer2(uint8 Value) noexcept
	{
		MPointer2=Value;
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------