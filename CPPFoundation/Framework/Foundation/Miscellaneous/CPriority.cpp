//----------------------------------------------------------------------------------------------------------------------
#include "CPriority.h"
#include <Framework/Foundation/Types/CPrimitiveType.h>
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Foundation
{
//----------------------------------------------------------------------------------------------------------------------
	const CPriority												CPriority::PRIORITY_DEFAULT=CPriority(0);
	const CPriority												CPriority::PRIORITY_MIN=CPriority(CInt32::Min());
	const CPriority												CPriority::PRIORITY_MAX=CPriority(CInt32::Max());
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	bool CPriority::CPriorityComparer::IsBefore(const CPriority& Left, const CPriority& Right) const
	{
		return(Left>Right);
	}
//----------------------------------------------------------------------------------------------------------------------
	bool CPriority::CPriorityComparer::operator()(const CPriority& Priority1, const CPriority& Priority2) const noexcept
	{
		return(Priority1>Priority2);
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CPriority::CPriority(void) noexcept
		: MPriority(PRIORITY_DEFAULT.GetPriority())
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CPriority::CPriority(PriorityType Priority) noexcept
		: MPriority(Priority)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CPriority::CPriority(const CPriority& Other) noexcept
		: MPriority(Other.MPriority)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CPriority::~CPriority(void)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CPriority& CPriority::operator=(const CPriority& Other)
	{
		MPriority=Other.MPriority;

		return(*this);
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	bool operator==(const CPriority& Left, const CPriority& Right) noexcept
	{
		if (Left.MPriority==Right.MPriority)
		{
			return(true);
		}
		else
		{
			return(false);
		}
	}
//----------------------------------------------------------------------------------------------------------------------
	bool operator!=(const CPriority& Left, const CPriority& Right) noexcept
	{
		if (Left.MPriority!=Right.MPriority)
		{
			return(true);
		}
		else
		{
			return(false);
		}
	}
//----------------------------------------------------------------------------------------------------------------------
	bool operator<(const CPriority& Left, const CPriority& Right) noexcept
	{
		if (Left.MPriority<Right.MPriority)
		{
			return(true);
		}
		else
		{
			return(false);
		}
	}
//----------------------------------------------------------------------------------------------------------------------
	bool operator<=(const CPriority& Left, const CPriority& Right) noexcept
	{
		if (Left.MPriority<=Right.MPriority)
		{
			return(true);
		}
		else
		{
			return(false);
		}
	}
//----------------------------------------------------------------------------------------------------------------------
	bool operator>(const CPriority& Left, const CPriority& Right) noexcept
	{
		if (Left.MPriority>Right.MPriority)
		{
			return(true);
		}
		else
		{
			return(false);
		}
	}
//----------------------------------------------------------------------------------------------------------------------
	bool operator>=(const CPriority& Left, const CPriority& Right) noexcept
	{
		if (Left.MPriority>=Right.MPriority)
		{
			return(true);
		}
		else
		{
			return(false);
		}
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	const CPriority& CPriority::Default(void) noexcept
	{
		return(PRIORITY_DEFAULT);
	}
//----------------------------------------------------------------------------------------------------------------------
	const CPriority& CPriority::Min(void) noexcept
	{
		return(PRIORITY_MIN);
	}
//----------------------------------------------------------------------------------------------------------------------
	const CPriority& CPriority::Max(void) noexcept
	{
		return(PRIORITY_MAX);
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CString CPriority::ToString(void) const
	{
		return(CString::Format("PRIORITY [",MPriority,"]"));
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CPriority::PriorityType CPriority::GetPriority(void) const noexcept
	{
		return(MPriority);
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------