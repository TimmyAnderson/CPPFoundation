//----------------------------------------------------------------------------------------------------------------------
#include "CThreadWithStopRequestedEvent.h"
#include <Framework/Foundation/Console/CConsoleHelper.h>
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Testing
{
//----------------------------------------------------------------------------------------------------------------------
	using namespace CPPFoundation::Foundation;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CThreadWithStopRequestedEvent::CThreadWithStopRequestedEvent(CLogWriter& LogWriter)
		: CThread(LogWriter,"THREAD with STOP REQUESTED EVENT"), MCounter(0), MStopActionCounter(0)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CThreadWithStopRequestedEvent::~CThreadWithStopRequestedEvent(void)
	{
		StopThread();
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	void CThreadWithStopRequestedEvent::ThreadMethod(bool)
	{
		if (GetThreadState()==EThreadState::E_RUNNING)
		{
			CConsoleHelper::WriteLine(CString::Format("THREAD is RUNNING [",++MCounter,"] !"));
		}
		else
		{
			CConsoleHelper::WriteLine(CString::Format("THREAD is STOPPING [",++MStopActionCounter,"] !"));

			if (MStopActionCounter>=4)
			{
				FinishThread();
			}
		}
	}
//----------------------------------------------------------------------------------------------------------------------
	CTimeout CThreadWithStopRequestedEvent::GetTimeout(void)
	{
		return(CTimeout(500));
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	void CThreadWithStopRequestedEvent::ThreadStopRequestedEvent(void)
	{
		CConsoleHelper::WriteLine(CString::Format("THREAD STOP REQUESTED !"));
	}
//----------------------------------------------------------------------------------------------------------------------
	void CThreadWithStopRequestedEvent::ThreadSafeUninitializationEvent(void)
	{
		MCounter=0;
		MStopActionCounter=0;
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	void CThreadWithStopRequestedEvent::StartThread(void)
	{
		InternalStartThread();
	}
//----------------------------------------------------------------------------------------------------------------------
	void CThreadWithStopRequestedEvent::StopThread(void)
	{
		InternalStopThread();
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------