//----------------------------------------------------------------------------------------------------------------------
#include "CManualResetMultiEventThread.h"
#include <Framework/Foundation/Console/CConsoleHelper.h>
//----------------------------------------------------------------------------------------------------------------------
namespace CPPFoundation
{
//----------------------------------------------------------------------------------------------------------------------
namespace Testing
{
//----------------------------------------------------------------------------------------------------------------------
	using namespace CPPFoundation::Foundation;
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	CManualResetMultiEventThread::CManualResetMultiEventThread(CLogWriter& LogWriter, CManualResetMultiEvent<3>& Event)
		: CThread(LogWriter,"MANUAL RESET MULTI EVENT THREAD"), MEvent(Event), MCodeExecuted(false)
	{
	}
//----------------------------------------------------------------------------------------------------------------------
	CManualResetMultiEventThread::~CManualResetMultiEventThread(void)
	{
		StopThread();
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	void CManualResetMultiEventThread::ThreadMethod(bool)
	{
		if (HasThreadExiting()==true)
		{
			return;
		}

		if (MCodeExecuted==false)
		{
			MCodeExecuted=true;

			CConsoleHelper::WriteLine("THREAD is RUNNING !");

			Sleep(1000);

			CConsoleHelper::WriteLine("THREAD is SETTING EVENT 1 !");

			MEvent.Set(0);

			Sleep(1000);

			CConsoleHelper::WriteLine("THREAD is SETTING EVENT 2 !");

			MEvent.Set(1);

			Sleep(1000);

			CConsoleHelper::WriteLine("THREAD is SETTING EVENT 3 !");

			MEvent.Set(2);
		}
	}
//----------------------------------------------------------------------------------------------------------------------
	CTimeout CManualResetMultiEventThread::GetTimeout(void)
	{
		if (MCodeExecuted==false)
		{
			return(CTimeout(0));
		}
		else
		{
			return(CTimeout());
		}
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	void CManualResetMultiEventThread::ThreadSafeUninitializationEvent(void)
	{
		MCodeExecuted=false;
	}
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
	void CManualResetMultiEventThread::StartThread(void)
	{
		InternalStartThread();
	}
//----------------------------------------------------------------------------------------------------------------------
	void CManualResetMultiEventThread::StopThread(void)
	{
		InternalStopThread();
	}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------
}
//----------------------------------------------------------------------------------------------------------------------